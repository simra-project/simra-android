plugins {
    id 'kotlin-android'
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id "com.google.protobuf" version "0.9.1"
}

def ENV_VARIABLE_PREFIX = "SIMRA_"
def API_ENDPOINT = "API_ENDPOINT"
def API_VERSION = "API_VERSION"

android {
    compileSdkVersion 34
    defaultConfig {
        applicationId "de.tuberlin.mcc.simra.app"
        minSdkVersion 23
        targetSdkVersion 34
        versionCode 101
        versionName "101.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        // defining the build date
        buildConfigField "long", "BUILD_DATE", System.currentTimeMillis() + "L"

        // Load `local.properties` (from root) for development configuration
        Properties properties = new Properties()
        if (project.rootProject.file('local.properties').exists()) {
            properties.load(project.rootProject.file('local.properties').newDataInputStream())
        }


        buildConfigField "String", API_ENDPOINT, properties.getProperty(API_ENDPOINT) ?: "\"https://vm2.mcc.tu-berlin.de:8082/\""
        buildConfigField "String", API_VERSION, properties.getProperty(API_VERSION) ?: "\"13/\""

    }
    buildTypes {

        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            // Allow loading the configuration Settings from environment variables
            def VAR_API_ENDPOINT = System.getenv(ENV_VARIABLE_PREFIX + API_ENDPOINT)
            if (VAR_API_ENDPOINT != null) {
                buildConfigField "String", API_ENDPOINT, "\"" + VAR_API_ENDPOINT + "\""
            }
            def VAR_API_VERSION = System.getenv(ENV_VARIABLE_PREFIX + API_VERSION)
            if (VAR_API_VERSION != null) {
                buildConfigField "String", API_VERSION, "\"" + VAR_API_VERSION + "\""
            }
        }
        qa {
            initWith buildTypes.release
        }
    }
    buildFeatures {
        viewBinding = true
    }
    compileOptions {
        sourceCompatibility = '17'
        targetCompatibility = '17'
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    namespace 'de.tuberlin.mcc.simra.app'
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'androidx.appcompat:appcompat:1.3.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'

    implementation "androidx.lifecycle:lifecycle-service:2.3.1"
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'com.google.android.material:material:1.4.0'
    api 'org.osmdroid:osmdroid-android:6.1.18'
    api 'com.github.MKergall:osmbonuspack:6.7.0'
    implementation 'com.github.Jay-Goo:RangeSeekBar:v2.0.4'
    implementation 'com.github.PhilJay:MPAndroidChart:v2.2.4'
    implementation 'pl.droidsonroids.gif:android-gif-drawable:1.2.17'

    // RingBuffer
    implementation 'org.apache.commons:commons-collections4:4.4'

    // Tests
    testImplementation 'junit:junit:4.13'
    testImplementation "org.assertj:assertj-core:3.16.1"

    // "Backporting" Java 8 streams for Android < 24
    implementation 'net.sourceforge.streamsupport:android-retrostreams:1.7.2'

    // Kotlin
    implementation 'androidx.core:core-ktx:1.12.0'
    implementation "org.jetbrains.kotlin:kotlin-stdlib:1.9.22"

    // Proto
    implementation  "androidx.datastore:datastore:1.0.0"
    implementation  "com.google.protobuf:protobuf-javalite:3.18.0"
    implementation "androidx.datastore:datastore-rxjava3:1.0.0"
    implementation 'com.github.mik3y:usb-serial-for-android:3.7.0'



}

protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:3.23.2"
    }

    // Generates the java Protobuf-lite code for the Protobufs in this project. See
    // https://github.com/google/protobuf-gradle-plugin#customizing-protobuf-compilation
    // for more information.
    generateProtoTasks {
        all().each { task ->
            task.builtins {
                java {
                    option 'lite'
                }
            }
        }
    }
}
